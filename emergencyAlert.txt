#include <SoftwareSerial.h>

SoftwareSerial SIM900A(2, 3);

#define EMERGENCY_BUTTON A1 // Define the button pin

void setup() {
  SIM900A.begin(9600);   // GSM Module Baud rate - communication speed
  Serial.begin(9600);    // Baud rate of Serial Monitor in the IDE app
  Serial.println("Text Message Module Ready & Verified");
  delay(100);
  Serial.println("Type 's' to send message or 'r' to receive message");

  pinMode(EMERGENCY_BUTTON, INPUT_PULLUP); // Configure button as input with pull-up resistor
}

void loop() {
  // Check for button press to send an emergency message
  if (digitalRead(EMERGENCY_BUTTON) == LOW) { // Button pressed (input is LOW)
    SendMessage();
    delay(1000); // Debounce delay to prevent multiple sends
  }

  // Check for serial input to send or receive messages
  if (Serial.available() > 0) {
    switch (Serial.read()) {
      case 's':
        SendMessage();
        break;
      case 'r':
        ReceiveMessage();
        break;
    }
  }

  // Relay any messages from SIM900A to Serial Monitor
  if (SIM900A.available() > 0) {
    Serial.write(SIM900A.read());
  }
}

void SendMessage() {
  Serial.println("Sending Message, please wait...");
  SIM900A.println("AT+CMGF=1");    // Set text mode for SMS
  delay(1000);
  SIM900A.println("AT+CMGS=\"+919317586192\""); // Receiver's Mobile Number
  delay(1000);
  SIM900A.println("Please help! I am in emergency."); // Message content
  delay(100);
  SIM900A.write((char)26); // ASCII code for Ctrl+Z to send the SMS
  delay(1000); // Wait for SMS to be sent
  Serial.println("Message sent successfully");
}

void ReceiveMessage() {
  Serial.println("Receiving Messages");
  delay(1000);
  SIM900A.println("AT+CNMI=2,2,0,0,0"); // Enable message receiving mode
  delay(1000);
  Serial.println("Message received successfully");
}